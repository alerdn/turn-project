//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Freelook"",
            ""id"": ""099d6894-d8f0-413d-a5e7-9c43123a17b8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3a9a6a08-9b46-458b-ae71-a552144d00a3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3c20b08c-c0d4-456f-ae6e-bc499ebc41ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c80d945c-3d69-437b-b669-4c7bd52a2125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""230ca64a-0b99-43ae-8232-a28f6a851016"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""490b8412-1fe9-4204-8785-2b14dcb9c9ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""853b8405-621b-429e-bbea-7452dd4518f4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81d3b277-a44c-435b-92e7-83cdea562aaa"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ecd0ed2-0393-4f5b-b30c-2143b4d16fb1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e63eb845-47c1-43c7-910d-c62b6fc93dad"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43c9624a-0c46-4c58-807b-bde0bfc01987"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efc1b2e5-1eef-4038-90d5-f6c47691abec"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Offensive"",
            ""id"": ""71478a24-38ff-4795-ac97-4dc81d1797f5"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2de7e1ee-d282-4387-a6b1-62313211598f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleTurnMode"",
                    ""type"": ""Button"",
                    ""id"": ""10539dbc-f86b-4459-b150-ea5a06f19130"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0584e6c0-2560-4b7c-8b30-fed46251a894"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ff9e890-1cba-4dc3-85c5-380f59f6ca6e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d08f9838-042a-4d1c-92d6-e2f4baa26f12"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleTurnMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f141398-fe0f-4924-b00e-8858a134c6f6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleTurnMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Defensive"",
            ""id"": ""a6fe1b1b-4a92-46b2-93c8-66ce6dfdea20"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""6e6eb99d-ec4b-463f-ada2-bb50917048a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f0808fb-178f-4249-a8db-aaa648ac9d86"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebd4dc2a-c17d-4188-af19-1c4a19a18f16"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Freelook
        m_Freelook = asset.FindActionMap("Freelook", throwIfNotFound: true);
        m_Freelook_Movement = m_Freelook.FindAction("Movement", throwIfNotFound: true);
        m_Freelook_Jump = m_Freelook.FindAction("Jump", throwIfNotFound: true);
        m_Freelook_Interact = m_Freelook.FindAction("Interact", throwIfNotFound: true);
        // Offensive
        m_Offensive = asset.FindActionMap("Offensive", throwIfNotFound: true);
        m_Offensive_Attack = m_Offensive.FindAction("Attack", throwIfNotFound: true);
        m_Offensive_ToggleTurnMode = m_Offensive.FindAction("ToggleTurnMode", throwIfNotFound: true);
        // Defensive
        m_Defensive = asset.FindActionMap("Defensive", throwIfNotFound: true);
        m_Defensive_Interact = m_Defensive.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Freelook
    private readonly InputActionMap m_Freelook;
    private List<IFreelookActions> m_FreelookActionsCallbackInterfaces = new List<IFreelookActions>();
    private readonly InputAction m_Freelook_Movement;
    private readonly InputAction m_Freelook_Jump;
    private readonly InputAction m_Freelook_Interact;
    public struct FreelookActions
    {
        private @Controls m_Wrapper;
        public FreelookActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Freelook_Movement;
        public InputAction @Jump => m_Wrapper.m_Freelook_Jump;
        public InputAction @Interact => m_Wrapper.m_Freelook_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Freelook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FreelookActions set) { return set.Get(); }
        public void AddCallbacks(IFreelookActions instance)
        {
            if (instance == null || m_Wrapper.m_FreelookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreelookActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IFreelookActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IFreelookActions instance)
        {
            if (m_Wrapper.m_FreelookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFreelookActions instance)
        {
            foreach (var item in m_Wrapper.m_FreelookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreelookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FreelookActions @Freelook => new FreelookActions(this);

    // Offensive
    private readonly InputActionMap m_Offensive;
    private List<IOffensiveActions> m_OffensiveActionsCallbackInterfaces = new List<IOffensiveActions>();
    private readonly InputAction m_Offensive_Attack;
    private readonly InputAction m_Offensive_ToggleTurnMode;
    public struct OffensiveActions
    {
        private @Controls m_Wrapper;
        public OffensiveActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Offensive_Attack;
        public InputAction @ToggleTurnMode => m_Wrapper.m_Offensive_ToggleTurnMode;
        public InputActionMap Get() { return m_Wrapper.m_Offensive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OffensiveActions set) { return set.Get(); }
        public void AddCallbacks(IOffensiveActions instance)
        {
            if (instance == null || m_Wrapper.m_OffensiveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OffensiveActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @ToggleTurnMode.started += instance.OnToggleTurnMode;
            @ToggleTurnMode.performed += instance.OnToggleTurnMode;
            @ToggleTurnMode.canceled += instance.OnToggleTurnMode;
        }

        private void UnregisterCallbacks(IOffensiveActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @ToggleTurnMode.started -= instance.OnToggleTurnMode;
            @ToggleTurnMode.performed -= instance.OnToggleTurnMode;
            @ToggleTurnMode.canceled -= instance.OnToggleTurnMode;
        }

        public void RemoveCallbacks(IOffensiveActions instance)
        {
            if (m_Wrapper.m_OffensiveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOffensiveActions instance)
        {
            foreach (var item in m_Wrapper.m_OffensiveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OffensiveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OffensiveActions @Offensive => new OffensiveActions(this);

    // Defensive
    private readonly InputActionMap m_Defensive;
    private List<IDefensiveActions> m_DefensiveActionsCallbackInterfaces = new List<IDefensiveActions>();
    private readonly InputAction m_Defensive_Interact;
    public struct DefensiveActions
    {
        private @Controls m_Wrapper;
        public DefensiveActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Defensive_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Defensive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefensiveActions set) { return set.Get(); }
        public void AddCallbacks(IDefensiveActions instance)
        {
            if (instance == null || m_Wrapper.m_DefensiveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefensiveActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IDefensiveActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IDefensiveActions instance)
        {
            if (m_Wrapper.m_DefensiveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefensiveActions instance)
        {
            foreach (var item in m_Wrapper.m_DefensiveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefensiveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefensiveActions @Defensive => new DefensiveActions(this);
    public interface IFreelookActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IOffensiveActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnToggleTurnMode(InputAction.CallbackContext context);
    }
    public interface IDefensiveActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
